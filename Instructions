# Assignment-3

CS2133: Computer Science II
Assignment 3
Prof. Christopher Crick

1.)  Message in a Bottle (20 points)

Create a MessageFrame class extending JFrame and a MessagePanel class extending JPanel.  Addthe  panel  to  the  frame.   The  frame  should  be  titled  \Message  in  a  Bottle"  and  should  end  theprogram when the close box is clicked.  In the panel, draw a bottle shape using some combination ofGraphics object methods like drawLine, drawPolygon, drawPolyline, drawRoundRect and drawArc(look up the Graphics object in the Java API for details).  Make the bottle as attractive as you can,although you won't be graded on artistic merit.  In the center of the bottle shape, add a messagestring.  Create a Message class with a main method that instantiates the MessageFrame and getsthe ball rolling.

2.)  Sierpinski's Triangle (30 points)

Sierpinski's  Triangle  is  a  simple  and  famous  example  of  a  fractal  image.   It  is  built  recursivelyfrom a simple set of rules, illustrated in Figure 2.  Your task will be to create an application thatillustrates a perfect Sierpinski triangle,  regardless of how large the application frame is.  As theuser moves and resizes the application window, the triangle should be redrawn and made larger orsmaller as appropriate.Your  program  should  display  a  frame  that  is  based  on  the  size  of  the  user's  screen.   ThepaintComponent method of the panel on which you are drawing will be called whenever the frameis resized, so that happens automagically and you don't have to worry about it.  JPanels include agetHeight() and getWidth() method that you will be able to use to get the information you needfor passing to a recursive draw function that you will write.The  draw  algorithm  takes  the  coordinates  and  dimensions  of  a  square  area  of  the  screen  asinput.  If that square is the size of a single pixel, it should call drawRect() on the Graphics objectpassed  into  paintComponent,  drawing  a  one-pixel  square  at  the  given  coordinates.   If  larger,  itshould call the draw method three times recursively, once on the lower left quadrant of the square,once on the lower right, and once on an area centered above the other two (as illustrated in Figure2).The solution will look a lot like Figure 3, with the largest triangle  tting into the largest squarearea of the frame, and the smallest triangles being three pixels in size.1
Figure 3:  Representative illustration of the Sierpinski problem solution.3
Figure 4:  A half-completed game of Minesweeper with a rudimentary design.

3.)  Minesweeper (50 points)

You are going to write the game of Minesweeper.  The Minesweeper board is a graphical grid ofsquares.  A certain number of squares, chosen randomly, conceal dangerous mines.  Play proceedswhen a user left-clicks on a square.  If that square hides a mine, the game is over and the playerloses.  If not, then stepping on the square reveals the number of mines hidden by squares adjacentto  that  square  {  a  number  between  0  and  8.   A  player  can  right-click  on  a  square  that  has  notyet  been  stepped  on  to  mark  it  as  being  potentially  mined,  and  remove  the  mark  with  anotherright-click.Figure 4 shows a game in progress.  Numbers represent squares that have been clicked, 'F's areplaces the player has placed a  ag,  and ' ?'s are squares that have not yet been clicked.  This isa singularly unattractive gameboard;  you are welcome to add icons or grid squares or any otherkinds of graphics to liven up your own version.You are responsible for designing and implementing the whole game.  This is a big task; startearly.  Here are some suggestions.4

Model-View-Controller  architecture!   Implement  a  minesweeper  class  that  plays  the  gamewithout  relying  on  any  GUI  elements,  instead  using  method  calls  for  making  moves  andsending information.  This is the model.  The paintComponent methods of your UI objectsshould ask this model what to display.  This is the view.  The event handlers should call thegameplay methods in the model.  This is the controller.  Don't let things get mixed up orcomplicated!

This is a perfect setting for using a GridLayout.  Make it easy to change the number of squareson the board, maybe by setting a static  nal int.

JButtons might be a good choice for board squares, but keep in mind that ActionListenersdo not know how to respond to right-clicks.  You will have to use a MouseAdapter instead.A grid full of JLabels or JButtons that have been extended to have access to the model, andto know where they sit in the grid, would work, as would other more attractive user interfaceelements.

When you are setting up your board, you need to randomly determine whether each squareis mined or safe.  You can select a speci c number of squares to be mines, or you can assigneach square's status based on a certain probability of being a mine.  The latter is easier.

The  class  with  the  main  method  (Minesweeper.java)  and  the  one  extending  your  JFrameshould  be  only  be  a  couple  of  lines.   All  of  the  heavy  GUI  lifting  will  probably  be  splitbetween the class that extends JPanel and the one that extends whatever you decide to useto represent individual grid squares.  Your MouseListener can belong to either of these, butit's probably easier if each individual square is given its own MouseListener.  And the mostimportant object,  the model that actually implements the game,  shouldn't involve GUI atall!Make sure the program ends in a satisfying manner when the user clicks on a bomb.Extra Credit:  Because it is always safe to click every mine surrounding a square with a '0' init, most commercial versions of the game will automatically do so, and then do it again for any new'0' squares uncovered.  This can reveal large swaths of safe territory with a single click.  Implementthis functionality.Extra Credit: In the header area of the JFrame's BorderLayout, implement a counter showinghow many mines remain to be found.  This should initially report the number of mines on the board,and decrement or increment whenever the player plants or removes a  ag.

Extra Credit:  Wow us with the graphic design of your game.

Turning in 
this is the first  assignment  where  the  design  of  the  programs,  and  thus  the  Java   les  you  will require,  have  been  left  up  to  you.   The   les  with  the  main()  function  that  actually  execute  theprograms,  however,  should  be  named  Message.java,  Sierpinski.java  and  Minesweeper.java,  so  weknow which ones we're supposed to run.  Those three, plus all of the other .java  les that de ne theclasses you need for these programs { your subclassed JFrames and JPanels and the like { shouldbe  wrapped  up  in  a  zip   le  called  assignment3yourname.zip  and  uploaded  to  the  Dropbox  at5
online.okstate.edu.  Ensure that everything can be compiled and run from the command line.  Thisassignment is due Wednesday, October 4, at noon
